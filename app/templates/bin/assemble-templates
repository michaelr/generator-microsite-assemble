#!/usr/bin/env perl
use strict;
use warnings;
use App::Microsite::Assemble;
use Path::Class;
use Getopt::Long;
use Text::Xslate 'mark_raw';

my ($with_cms, $autogen_fragments);
GetOptions ( with_cms => \$with_cms, autogen_fragments => \$autogen_fragments );

my %args = (
    helpers => {
    },
);

if ($with_cms) {
    $args{fragment_filter} = sub {
        my ($content, $file, $name) = @_;
        my $relative_file = $file;
        $relative_file =~ s/^fragments\///;
        return "<iicmsfragment path='$relative_file'>$content</iicmsfragment>";
    };

    $args{missing_fragment} = sub {
        my ($name, $paths) = @_;

        dir($paths->[0])->mkpath;

        my $relative_fragment = $paths->[0];
        $relative_fragment =~ s/^fragments\///;
        return mark_raw("<iicmsfragment path='$relative_fragment/$name'>$name</iicmsfragment>");
    };
}
elsif ($autogen_fragments) {
    $args{missing_fragment} = sub {
        my ($name, $paths) = @_;
        my $dir = dir($paths->[0]);
        my $file = $dir->file($name);

        warn "Auto-generating dummy fragment $file\n";

        $dir->mkpath;
        $file->spew($name);

        return $name;
    };
}

my $report = App::Microsite::Assemble->assemble(%args);

# find all the fragments that were not referenced by any template
# and warn about it
my $fragment_iter = File::Next::files('fragments/');
while (defined(my $fragment = $fragment_iter->())) {
    warn "Unused fragment $fragment\n"
        if !$report->{seen_fragments}->{$fragment};
}

my $files = keys %{ $report->{built_files} };
if ($files == 1) {
    print "Built 1 file\n";
}
else {
    print "Built $files files\n";
}
